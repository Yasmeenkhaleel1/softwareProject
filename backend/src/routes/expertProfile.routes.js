// src/routes/expertProfile.routes.js
import express from "express";
import {
  createExpertProfile,
  getMyExpertProfile,
  updateMyExpertProfile,
  listExpertProfiles,
  approveExpertProfile,
  rejectExpertProfile,
  createDraftFromApproved,
  updateMyDraft,
  submitDraftForReview,
} from "../controllers/expertProfile.controller.js";
import ExpertProfile from "../models/expert/expertProfile.model.js";
import { auth } from "../middleware/auth.js";

const router = express.Router();

/**
 * üéØ ŸÇŸàÿßÿπÿØ ÿßŸÑŸàÿµŸàŸÑ:
 * - EXPERT: ÿ•ŸÜÿ¥ÿßÿ°/ÿ™ÿ≠ÿØŸäÿ´/ÿπÿ±ÿ∂ ÿ®ÿ±ŸàŸÅÿßŸäŸÑŸá.
 * - ADMIN: ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑÿßÿ™ + ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©/ÿßŸÑÿ±ŸÅÿ∂.
 * - Public: ÿπÿ±ÿ∂ ÿ£Ÿä ÿ®ÿ±ŸàŸÅÿßŸäŸÑ ÿÆÿ®Ÿäÿ± ŸÖŸÜÿ¥Ÿàÿ±.
 */

// ===== üß† Expert endpoints =====
router.post("/", auth("EXPERT"), createExpertProfile); // ÿ•ŸÜÿ¥ÿßÿ° ÿ®ÿ±ŸàŸÅÿßŸäŸÑ ÿ¨ÿØŸäÿØ
router.get("/me", auth("EXPERT"), getMyExpertProfile); // ÿπÿ±ÿ∂ ÿ®ÿ±ŸàŸÅÿßŸäŸÑŸá ÿßŸÑÿ¥ÿÆÿµŸä
router.put("/:profileId", auth("EXPERT"), updateMyExpertProfile); // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ (ÿ∑ÿßŸÑŸÖÿß "pending")

// ===== ‚úèÔ∏è Draft profile endpoints (EXPERT only) =====
router.post("/draft", auth("EXPERT"), createDraftFromApproved); // ÿ•ŸÜÿ¥ÿßÿ° ŸÜÿ≥ÿÆÿ© Draft
router.put("/draft/:draftId", auth("EXPERT"), updateMyDraft); // ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ÿπÿØŸäŸÑÿßÿ™ ÿπŸÑŸâ ÿßŸÑŸÄ Draft
router.post("/draft/:draftId/submit", auth("EXPERT"), submitDraftForReview); // ÿ•ÿ±ÿ≥ÿßŸÑ ŸÑŸÑŸÖÿ±ÿßÿ¨ÿπÿ©

// ===== üõ°Ô∏è Admin endpoints =====
router.get("/", auth("ADMIN"), listExpertProfiles); // ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑÿßÿ™
router.put("/:id/approve", auth("ADMIN"), approveExpertProfile); // ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©
router.put("/:id/reject", auth("ADMIN"), rejectExpertProfile); // ÿßŸÑÿ±ŸÅÿ∂

// ===== üåç Public endpoint (ÿπÿ±ÿ∂ ÿ®ÿ±ŸàŸÅÿßŸäŸÑ ÿÆÿ®Ÿäÿ± ŸÑÿ£Ÿä ŸÖÿ≥ÿ™ÿÆÿØŸÖ) =====
router.get("/view/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const profile = await ExpertProfile.findOne({ userId }).select(
      "name bio specialization experience location gallery certificates profileImageUrl status"
    );

    if (!profile)
      return res.status(404).json({ message: "Profile not found" });

    res.status(200).json(profile);
  } catch (err) {
    console.error("‚ùå Error fetching public profile:", err);
    res.status(500).json({ message: "Server error" });
  }
});

export default router;
